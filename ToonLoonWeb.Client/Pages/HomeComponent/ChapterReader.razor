@page "/{MangaID}/Chapters/{index:int?}"
@rendermode InteractiveWebAssembly
@inject IJSRuntime JS
@using ToonLoonWeb.Models

@if (isLoading == false)
{
    <div class="ChapterReader-container">
        <div class="ChapterReader-controls">
        </div>
        <div class="ChapterReader-reader">
            @{
                var chap = chapterList[index];
                foreach (var img in chap.Images)
                {
                    <img style="width:100%;height:auto;" src="@img" />
                }
            }
        </div>
    </div>
}
else
{
    <h2>Loading...</h2>
}


@code {
    [Parameter]
    public string? MangaID { get; set; }

    public Toon? toon { get; set; }
    public List<Chapter>? chapterList = new List<Chapter>();
    public Chapter? chapter { get; set; }
    [Parameter]
    public int index { get; set; }
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieves the list of users from Firebase
            toon = await JS.InvokeAsync<Toon>("getToonData", MangaID);
            chapterList = await JS.InvokeAsync<List<Chapter>>("getToonChapters", MangaID);
            // Sets isLoading to false to indicate that the component has finished loading
            isLoading = false;
            // Forces the component to re-render
            StateHasChanged();
        }
    }
}
