@page "/{MangaID}/Chapters/{index:int?}"
@rendermode InteractiveWebAssembly
@inject IJSRuntime JS
@using ToonLoonWeb.Models

@if (isLoading == false)
{
    <div class="ChapterReader-container">
        <div class="ChapterReader-controls">
            <button class="ChapterReader-button" @onclick="Decrement" disabled="@isPrevDisabled">Prev</button>
            <h5>Chapter @index</h5>
            <button class="ChapterReader-button" @onclick="Increment" disabled="@isNextDisabled">Next</button>
        </div>
        <div class="ChapterReader-reader">
            @{
                var chap = chapterList[index];
                foreach (var img in chap.Images)
                {
                    <img style="width:100%;height:auto;" src="@img" />
                }
            }
        </div>
    </div>
}
else
{
    <svg xmlns="http://www.w3.org/2000/svg" width="90px" height="90px" viewBox="0 0 24 24"><path fill="#ffa200" d="M12 2A10 10 0 1 0 22 12A10 10 0 0 0 12 2Zm0 18a8 8 0 1 1 8-8A8 8 0 0 1 12 20Z" opacity="0.5" /><path fill="#ffa200" d="M20 12h2A10 10 0 0 0 12 2V4A8 8 0 0 1 20 12Z"><animateTransform attributeName="transform" dur="1s" from="0 12 12" repeatCount="indefinite" to="360 12 12" type="rotate" /></path></svg>
}


@code {
    [Parameter]
    public string? MangaID { get; set; }

    public Toon? toon { get; set; }
    public List<Chapter>? chapterList = new List<Chapter>();
    public Chapter? chapter { get; set; }
    [Parameter]
    public int index { get; set; }
    private bool isLoading = true;
    private bool isNextDisabled = false;
    private bool isPrevDisabled = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieves the list of users from Firebase
            toon = await JS.InvokeAsync<Toon>("getToonData", MangaID);
            chapterList = await JS.InvokeAsync<List<Chapter>>("getToonChapters", MangaID);
            // Sets isLoading to false to indicate that the component has finished loading
            isLoading = false;
            // Forces the component to re-render
            StateHasChanged();
        }
    }

    private void Increment()
    {
        isPrevDisabled = false;
        if(index >= 0)
        {
            index++;
        }
        if (index == chapterList.Count - 1)
        {
            isNextDisabled = true;
        }
    }
    private void Decrement()
    {
        isNextDisabled = false;
        if (index >= 0)
        {
            index--;
        }
        if(index == 0)
        {
            isPrevDisabled = true;
        }
    }
}
